services:
  api:
    build:
      context: api
      target: builder
    env_file:
      - api/.env
    depends_on:
      postgres:
        condition: service_healthy
    ports:
      - ${SERVER_PORT}:${SERVER_PORT}
    networks:
      - app-network
  postgres:
    hostname: postgres
    restart: always
    image: postgres:latest
    user: postgres
    volumes:
      - ./volumes/postgres:/var/lib/postgresql/data
    environment:
      - POSTGRES_USER=${POSTGRESQL_USERNAME}
      - POSTGRES_PASSWORD=${POSTGRESQL_PASSWORD}
      - POSTGRES_DB=${POSTGRESQL_DATABASE}
      - POSTGRESQL_PORT=${POSTGRESQL_PORT}
    ports:
      - ${POSTGRESQL_PORT}:5432
    healthcheck:
      test: ["CMD", "pg_isready"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network
  reverse_proxy:
    image: nginx
    container_name: reverse_proxy
    volumes:
      - type: bind
        source: ./nginx/nginx.conf
        target: /etc/nginx/conf.d/default.conf
        read_only: true
    ports:
      - 80:80
    depends_on:
      - api
    networks:
      - app-network
volumes:
  db-data:
networks:
  app-network:
    driver: bridge